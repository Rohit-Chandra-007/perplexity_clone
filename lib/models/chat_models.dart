import 'package:freezed_annotation/freezed_annotation.dart';

// required: associates our `chat_models.dart` with the code generated by Freezed
part 'chat_models.freezed.dart';
// optional: Since our classes are serializable, we must add this line.
part 'chat_models.g.dart';

@freezed
abstract class SearchResult with _$SearchResult {
  const factory SearchResult({
    required String title,
    required String url,
    String? snippet,
  }) = _SearchResult;

  factory SearchResult.fromJson(Map<String, Object?> json) =>
      _$SearchResultFromJson(json);
}

@freezed
abstract class ChatMessage with _$ChatMessage {
  const factory ChatMessage({
    required String id,
    required String query,
    required DateTime timestamp,
    @Default([]) List<SearchResult> sources,
    @Default('') String answer,
    @Default(ChatStatus.loading) ChatStatus status,
  }) = _ChatMessage;

  factory ChatMessage.fromJson(Map<String, Object?> json) =>
      _$ChatMessageFromJson(json);
}

enum ChatStatus { loading, streaming, completed, error }

@freezed
abstract class ChatState with _$ChatState {
  const factory ChatState({
    @Default([]) List<ChatMessage> messages,
    @Default(false) bool isConnected,
    String? error,
  }) = _ChatState;

  factory ChatState.fromJson(Map<String, Object?> json) =>
      _$ChatStateFromJson(json);
}
